#!/usr/bin/python2
import glob
import os
import re
import string
import sys

###############################################################################
# Define some global paths
HOME = os.environ['HOME']
REDHATDIR = os.path.join(HOME, 'redhat')
WEBSITES = os.path.join(HOME, 'websites')
BUILDS = ('rh6', 'rh7', 'fc2')
CWD = os.getcwd()
POSTINSTALL = ''

###############################################################################
# Common functions
def system(cmd):
	print "makedist: Executing '%s'" % cmd
	if os.system(cmd) != 0:
		print 'makedist: Command "%s" failed.' % cmd
		sys.exit(1)

def copyfile(filename):
	global archiverdir
	dstpath = os.path.join(archiverdir, filename)
	print "makedist: Copying %s = %s" % (filename, dstpath)
	content = open(filename).read()
	try: os.unlink(dstpath)
	except OSError: pass
	return open(dstpath, 'w').write(content)

def forcelink(src, dst):
	try: os.unlink(dst)
	except OSError: pass
	return os.link(src, dst)

def linkfile(filename):
	global archiverdir
	dstpath = os.path.join(archiverdir, filename)
	print "makedist: Linking %s => %s" % (filename, dstpath)
	return forcelink(filename, dstpath)

def renamerx(srcpath, dstpath, rx):
	result = [ ]
	filenames = filter(rx.match, os.listdir(srcpath))
	for filename in filenames:
		srcfile = os.path.join(srcpath, filename)
		dstfile = os.path.join(dstpath, filename)
		result.append(dstfile)
		print "makedist: Moving %s => %s" % (srcfile, dstfile)
		os.rename(srcfile, dstfile)
	return result

def linktree(srcdir, dstdir):
	for file in os.listdir(srcdir):
		srcpath = os.path.join(srcdir, file)
		dstpath = os.path.join(dstdir, file)
		if os.path.isdir(srcpath):
			print "makedist: Creating directory %s" % dstpath
			try: os.mkdir(dstpath)
			except OSError: pass
			linktree(srcpath, dstpath)
		else:
			print "makedist: Linking %s => %s" % (file, dstpath)
			try: os.unlink(dstpath)
			except OSError: pass
			os.link(srcpath, dstpath)

def deltree(dir, unlinkprefix=None):
	if os.path.isdir(dir):
		for filename in os.listdir(dir):
			path = os.path.join(unlinkprefix or dir, filename)
			if os.path.isdir(path):
				if unlinkprefix:
					deltree(path, os.path.join(unlinkprefix, dir))
				else:
					deltree(path)
			else:
				print "makedist: Removing %s" % path
				os.unlink(path)
		print "makedist: Removing directory %s" % dir
		os.rmdir(dir)

def deltreetrans(dir, prefix):
	if os.path.isdir(dir):
		for filename in os.listdir(dir):
			path = os.path.join(dir, filename)
			ppath = os.path.join(prefix, filename)
			if os.path.isdir(path):
				deltreetrans(path, ppath)
				#print "makedist: Removing directory %s" % ppath
				#os.rmdir(ppath)
			else:
				print "makedist: Removing %s" % ppath
				os.unlink(ppath)

###############################################################################
# Determine the version and package strings from the VERSION file, and read
# in the configuration file.
(PACKAGE,VERSION) = string.split(string.strip(open('VERSION').readline()), ' ')
execfile('makedist.py')

###############################################################################
# Build some filename defines to simplify later steps.
RPMDIR = os.path.join(REDHATDIR, 'RPMS')
SRPMDIR = os.path.join(REDHATDIR, 'SRPMS')
PKGURL = 'http://%s/%s/' % (WEBSITE, PACKAGE)
DSTDIR = os.path.join(WEBSITES, WEBSITE, 'www', PACKAGE)
archivedir = os.path.join(HOME, 'archive', PACKAGE)
archiverdir = os.path.join(archivedir, VERSION)
lastfile = os.path.join(archivedir, 'LAST')
distdir = '%s-%s' % (PACKAGE, VERSION)
tar = distdir + '.tar.gz'
sig = tar + '.sig'
archrpmrx = re.compile('^.*-%s-[0123456789]+\..*\.rpm$' % VERSION)
srcrpmrx = re.compile('^%s-[0123456789]+\.src\.rpm$' % distdir)
noarch = os.system("grep '^BuildArch: noarch$' spec >/dev/null 2>&1") == 0

###############################################################################
# Make sure all changes are committed to the subversion repository before
# continuing.
if os.path.exists('CVS'):
	print "Please convert this package before continuing"
if os.path.isdir('.svn'):
	re_svn_url = re.compile(r'^\s*url="(.+)"\s*$')
	entries = file('.svn/entries').read()
	if entries[:7] == '8\n\ndir\n':
		svn_url = entries.split('\n')[4]
	else:
		svn_url = re_svn_url.match(entries).group(1)
	svn_base = svn_url
	if svn_base[-6:] == '/trunk':
		svn_base = svn_base[:-6]
	system('test $( svn diff | wc -c ) = 0')
elif os.path.isdir('.git'):
	system('test $( git diff | wc -c ) = 0')

###############################################################################
# Make sure all system dependancies are covered
system('spac')
#system('spac-sysdeps')
system('make </dev/null')
if os.path.exists('tests') and os.path.exists('tests.sh'):
	system('spac-tests')
	system('dash tests.sh')
	system('ksh tests.sh')

###############################################################################
# Make the distribution tarball.
system('spac-dist')

###############################################################################
# Build the RPM sets

# FIXME: Need to write rpm log to file, and grep for "Wrote: ...RPMS/..." lines
# FIXME: Drop the hard-coded i386 target?
rpmcmd = "cd %(CWD)s && nice rpmbuild -ta --clean --target=i386 %(tar)s" % vars()
rpmfiles = [ ]

dorpm = os.path.exists('spec') and not os.path.exists('spec.dist')

if dorpm:
	if noarch:
		system(rpmcmd)
		rpmfiles.extend(renamerx(os.path.join(RPMDIR, 'noarch'), '.', archrpmrx))
	else:
		for build in BUILDS:
			deltree(build)
			os.mkdir(build)
			system("/roots/%(build)s/exec '%(rpmcmd)s'" % vars())
			for dir in os.listdir(RPMDIR):
				rpmfiles.extend(renamerx(os.path.join(RPMDIR, dir), build, archrpmrx))
	rpmfiles.extend(renamerx(SRPMDIR, '.', srcrpmrx))

	system('rpm --resign %s' % string.join(rpmfiles, ' '))

###############################################################################
# If a previous build left around an archive directory, remove it.
deltree(archiverdir)

###############################################################################
# Determine what the previous version of the software was.
try:
	LAST_VERSION = string.strip(open(lastfile).readline())
except IOError:
	versions = os.listdir(archivedir)
	versions.sort()
	if len(versions): LAST_VERSION = versions[-1]
	else: LAST_VERSION = None

###############################################################################
# Create an archive directory as it will be laid out on the web site.
os.makedirs(archiverdir, 0755)
for pattern in EXTRAS:
	list = glob.glob(pattern)
	if not list:
		print 'makedist: Extra file "%s" not found' % pattern
		sys.exit(1)
	for file in list:
		copyfile(file)
linkfile(tar)
linkfile(sig)
if dorpm and not noarch:
	for build in BUILDS:
		os.mkdir(os.path.join(archiverdir, build), 0755)
for filename in rpmfiles: linkfile(filename)

###############################################################################
# Wait for user response before committing the files to the website.
raw_input('Press Enter to continue sending the installation to the web site:')

###############################################################################
# Delete the old version from the web site, and copy the release files on.
if not os.path.isdir(os.path.join(DSTDIR, 'archive')):
	os.makedirs(os.path.join(DSTDIR, 'archive'), 0755)
forcelink(tar, os.path.join(DSTDIR, 'archive', tar))
forcelink(sig, os.path.join(DSTDIR, 'archive', sig))
forcelink(tar, os.path.join('/usr/portage/distfiles', tar))
if LAST_VERSION:
	deltreetrans(os.path.join(archivedir, LAST_VERSION), DSTDIR)
linktree(archiverdir, DSTDIR)

system('chmod -R -w %(archiverdir)s' % vars())
open(lastfile, 'w').write('%s\n' % VERSION)

system('make -C %s/websites/%s' % (HOME, WEBSITE))

###############################################################################
# Send out an announcement to mailing lists.
#system("signed-mailsubj 'Announcing %s version %s' %s < ANNOUNCEMENT" % (
system("mutt -s 'Announcing %s version %s' -i ANNOUNCEMENT %s" % (
	PACKAGE, VERSION, string.join(LISTS, ' ')))

###############################################################################
# Tag the package in the subversion with the release number.
if os.path.isdir('.svn'):
	system("svn copy '%s' '%s/tags/%s' -m 'Tagged version %s'" % (
		svn_url, svn_base, VERSION, VERSION))
if os.path.isdir('.git'):
	system("git tag -s -m 'Version %s' %s" % (
		VERSION, VERSION ))
	system('git push origin master %s' % VERSION)

###############################################################################
# Optionally upload the RPMs to FTP sites.
#for (host,path) in RPMUPLOAD:
#	system("ncftpput -r 16 %s %s %s" % (
#		host, path, string.join(rpmfiles, ' ')))

os.unlink(tar)
os.unlink(sig)
for file in rpmfiles:
	os.unlink(file)
if dorpm and not noarch:
	for build in BUILDS:
		os.rmdir(build)

os.system(POSTINSTALL)
